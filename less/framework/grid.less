// Grid system
// --------------------------------------------------

.container {
  .make-container();
}
.row {
  .make-rows();
}

// Global column styles
.col {
  position: relative;
  float: left;
  width: 100%;
  padding: 0 @grid-gutter-width / 2; // default
  min-height: 1px; // Prevent columns from collapsing when empty
  &.centered {
    float: none !important;
    margin-left: auto;
    margin-right: auto;
  }
  &.uncentered {
    float: left !important;
    margin-left: 0;
    margin-right: 0;
    &.opposite {
      float: right !important;
    }
  }
  // If you want to float that last column to go to the edge
  // of the row, you can add the class '.last' to the last column
  + .col {
    &.last {
      float: right!important;
    }
  }
}


// Grid
// ---------------------------------------
// Generate only the parts you need; comment out the parts you don't

@media screen and (min-width: @site-min-width) {
  // make xs grid
  .make-columns(@columns: @grid-columns-xs; @size: xs);
}

@media screen and (min-width: @breakpoint-sm) {
  // make sm grid
  .make-columns(@columns: @grid-columns-sm; @size: sm);
}

@media screen and (min-width: @breakpoint-md) {
  // make md grid (default)
  #grid > .make-grid(@columns: @grid-columns-md; @size: md);
  .make-targeted-offsets-only(@columns: @grid-columns-md; @size: md);
}

@media screen and (min-width: @breakpoint-lg) {
  // make lg grid
  .make-columns(@columns: @grid-columns-lg; @size: lg);
  .make-targeted-centering(@size: lg);
  .make-targeted-offsets-only(@columns: @grid-columns-lg; @size: lg);
}

@media screen and (min-width: @breakpoint-xl) {
  //make xl grid
  .make-columns(@columns: @grid-columns-xl; @size: xl);
  .make-targeted-centering(@size: xl);
  .make-targeted-offsets-only(@columns: @grid-columns-xl; @size: xl);
}

@media screen and (min-width: (@site-max-width + @grid-gutter-width)) {
  .container {
    width: @site-max-width;
  }
}